{% set action1 = 'set_service1' %}
{% set action2 = 'set_service2' %}
{% set action3 = 'set_service3' %}
{% set action4 = 'set_alarm_sender' %}
{% set action5 = 'start_UAC' %}
{% set action6 = 'start_URC' %}
{% set action7 = 'end_round' %}
{% set actions = [action1, action2, action3, action4, action5, action6, action7] %}
dtmc

{% for service in [service1, service2, service3] %}
{% if evochecker_template %}
evolve param int {{ service.state_name }}_latest_probe_max [{{ evochecker.range_min }} .. {{ evochecker.range_max }}];
{% elif compute_baseline %}
const int {{ service.state_name }}_latest_probe_max;
{% else %}
const int {{ service.state_name }}_latest_probe_max = {{ service.latest_probe_max | default('20') }};
{% endif %}
{% endfor %}
const double alarm_frequency = {{ alarm_sender.rate | default('1/3') }};

module synchronisation
    sync_s: [0..{{ actions | length - 1 }}] init 0;
    {% for action in actions %}
    {% if not loop.last %}
    [{{ action }}] sync_s = {{ loop.index0 }} -> 1 : (sync_s'={{ loop.index }});
    {% else %}
    [{{ action }}] sync_s = {{ loop.index0 }} -> 1 : (sync_s'=0);
    {% endif %}
    {% endfor %}
endmodule

{% for service in [service1, service2, service3] %}
{% if service.simple_service %}
module {{ service.name }}
    {{ service.state_name }}: [0..1] init {{ service.init_state | default('0', true) }};
    [{{ actions[loop.index0] }}] true ->  {{ service.target_failure_rate }}: ({{ service.state_name }}'=1) + 1-{{ service.target_failure_rate }}: ({{ service.state_name }}'=0);
endmodule
{% else %}
module {{ service.name }}
    {{ service.state_name }}: [0..2] init {{ service.init_state | default('0', true) }};
    [{{ actions[loop.index0] }}] {{ service.state_name }} <= 1 ->  {{ service.failure_rate }}: ({{ service.state_name }}'=1) + {{ service.persistent_failure_rate }}: ({{ service.state_name }}'=2) + 1-{{ service.failure_rate }}-{{ service.persistent_failure_rate }}: ({{ service.state_name }}'=0);
    [{{ actions[loop.index0] }}] {{ service.state_name }} = 2  ->  {{ service.persistent_recovery_rate }}: ({{ service.state_name }}'=0) + 1-{{ service.persistent_recovery_rate }}: ({{ service.state_name }}'=2);
endmodule
{% endif %}

{% endfor %}
module alarm_sender
    alarm: [0..1] init 0;
    [{{ action4 }}] (sync_s=3) -> alarm_frequency: (alarm'=1) + 1-alarm_frequency: (alarm'=0);
endmodule

// Permutations [(1, 2, 3), (1, 3, 2), (2, 1, 3), (2, 3, 1), (3, 1, 2), (3, 2, 1)]
// UAC
module adaptation_MAPE_controller
    uac_s: [0..4] init 0;
    mode: [1..6] init 6;
    successful_invocation: [0..1] init 0;

    // Plan (set mode)
    {% if uac.strategy == "URC" %}
    {% for c in configurations %}
    [{{ action5 }}] uac_s = 0 & successful_invocation = 0 & {% if not c.s1_np %}! {% endif %}s1_needs_probing & {% if not c.s2_np %}! {% endif %}s2_needs_probing & {% if not c.s3_np %}! {% endif %}s3_needs_probing & s1hat {% if not c.s1_pf %}!{% endif %}= 2 & s2hat {% if not c.s2_pf %}!{% endif %}= 2 & s3hat {% if not c.s3_pf %}!{% endif %}= 2  -> 1: (uac_s' = 1) & (mode' = {{c.mode}});
    {% endfor %}
    {% elif uac.strategy == "Round Robin" %}
    // Round Robin (1, 2, 3) -> (2, 3, 1) -> (3, 1, 2) -> (1, 3, 2) -> (2, 1, 3) -> (3, 2, 1)
    [{{ action5 }}] uac_s = 0 & mode = 1 & successful_invocation = 0 & alarm = 1 -> 1: (mode' = 4) & (uac_s' = 1);
    [{{ action5 }}] uac_s = 0 & mode = 4 & successful_invocation = 0 & alarm = 1 -> 1: (mode' = 5) & (uac_s' = 1);
    [{{ action5 }}] uac_s = 0 & mode = 5 & successful_invocation = 0 & alarm = 1 -> 1: (mode' = 2) & (uac_s' = 1);
    [{{ action5 }}] uac_s = 0 & mode = 2 & successful_invocation = 0 & alarm = 1 -> 1: (mode' = 3) & (uac_s' = 1);
    [{{ action5 }}] uac_s = 0 & mode = 3 & successful_invocation = 0 & alarm = 1 -> 1: (mode' = 6) & (uac_s' = 1);
    [{{ action5 }}] uac_s = 0 & mode = 6 & successful_invocation = 0 & alarm = 1 -> 1: (mode' = 1) & (uac_s' = 1);
    [{{ action5 }}] uac_s = 0 & successful_invocation = 0 & alarm = 0 -> 1: (uac_s' = 1);
    {% elif uac.strategy == "Random" %}
    [{{ action5 }}] uac_s = 0 & successful_invocation = 0 -> 1/6: (mode' = 1) & (uac_s' = 1) +
                                                             1/6: (mode' = 2) & (uac_s' = 1) +
                                                             1/6: (mode' = 3) & (uac_s' = 1) +
                                                             1/6: (mode' = 4) & (uac_s' = 1) +
                                                             1/6: (mode' = 5) & (uac_s' = 1) +
                                                             1/6: (mode' = 6) & (uac_s' = 1);
    {% elif uac.strategy == "Mode 6" %}
    [{{ action5 }}] uac_s = 0 & successful_invocation = 0 -> 1: (mode' = 6) & (uac_s' = 1);
    {% elif uac.strategy == "Mode 5" %}
    [{{ action5 }}] uac_s = 0 & successful_invocation = 0 -> 1: (mode' = 5) & (uac_s' = 1);
    {% elif uac.strategy == "Mode 4" %}
    [{{ action5 }}] uac_s = 0 & successful_invocation = 0 -> 1: (mode' = 4) & (uac_s' = 1);
    {% elif uac.strategy == "Mode 3" %}
    [{{ action5 }}] uac_s = 0 & successful_invocation = 0 -> 1: (mode' = 3) & (uac_s' = 1);
    {% elif uac.strategy == "Mode 2" %}
    [{{ action5 }}] uac_s = 0 & successful_invocation = 0 -> 1: (mode' = 2) & (uac_s' = 1);
    {% else %}
    [{{ action5 }}] uac_s = 0 & successful_invocation = 0 -> 1: (mode' = 1) & (uac_s' = 1);
    {% endif %}

    // Alarm
    {% for services in [[service1, service2, service3], [service1, service3, service2], [service2, service1, service3], [service2, service3, service1], [service3, service1, service2], [service3, service2, service1]] %}
    {% set mode = loop.index %}
    // Mode {{ mode }}
    {% for service in services %}
    [{{ service.state_name }}_invocation] mode = {{ mode }} & uac_s = {{ loop.index }} &   {{ service.state_name }}_needs_invocation & {{ service.state_name }} = 0 -> 1: (uac_s' = {{ loop.index + 1 }}) & (successful_invocation' = 1);
    [{{ service.state_name }}_invocation] mode = {{ mode }} & uac_s = {{ loop.index }} &   {{ service.state_name }}_needs_invocation & {{ service.state_name }} > 0 -> 1: (uac_s' = {{ loop.index + 1 }});
    [             ] mode = {{ mode }} & uac_s = {{ loop.index }} & ! {{ service.state_name }}_needs_invocation -> 1: (uac_s' = {{ loop.index + 1 }});
    {% endfor %}
    {% endfor %}
    // Reset
    [{{ action6 }}] uac_s = 4 -> (uac_s' = 0) & (successful_invocation' = 0);
endmodule

module Knowledge
    {% for service in [service1, service2, service3] %}
    {{ service.state_name }}hat: [0..2] init 0;
    {% endfor %}

    {% for service in [service1, service2, service3] %}
    [{{ service.state_name }}_invocation] {{ service.state_name }} = 0 -> ({{ service.state_name }}hat' = 0);
    [{{ service.state_name }}_invocation] {{ service.state_name }} > 0 & {{ service.state_name }}hat <= 2 -> ({{ service.state_name }}hat' = min(({{ service.state_name }}hat + 1),2));
    //[update_{{ service.state_name }}] true -> ({{ service.state_name }}hat' = {{ service.state_name }});
    {% endfor %}
endmodule

// URC
module uncertainty_reduction_controller
    urc_s: [0..1] init 0;
    {% for service in [service1, service2, service3] %}
    {{ service.state_name }}_latest_probe: [0..{{ service.state_name }}_latest_probe_max] init 0;
    {% endfor %}

    {% for service in [service1, service2, service3] %}
    [{{ service.state_name }}_invocation] (sync_s = 5) -> 1: ({{ service.state_name }}_latest_probe' = 0);
    {% endfor %}

    {% if urc.deactivated %}
    [{{ action6 }}] urc_s = 0 & {{ service1.state_name }}_latest_probe < {{ service1.state_name }}_latest_probe_max & {{ service2.state_name }}_latest_probe < {{ service2.state_name }}_latest_probe_max & {{ service3.state_name }}_latest_probe < {{ service3.state_name }}_latest_probe_max -> 1: (urc_s' = 1);
    {% else %}
    [{{ action6 }}] urc_s = 0 & {{ service1.state_name }}_latest_probe < {{ service1.state_name }}_latest_probe_max & {{ service2.state_name }}_latest_probe < {{ service2.state_name }}_latest_probe_max & {{ service3.state_name }}_latest_probe < {{ service3.state_name }}_latest_probe_max -> 1: (urc_s' = 1) & ({{ service1.state_name }}_latest_probe' = {{ service1.state_name }}_latest_probe + 1 ) & ({{ service2.state_name }}_latest_probe' = {{ service2.state_name }}_latest_probe + 1 ) & ({{ service3.state_name }}_latest_probe' = {{ service3.state_name }}_latest_probe + 1 );
    {% endif %}
    [{{ action7 }}] urc_s = 1 -> (urc_s' = 0);
endmodule

{% for service in [service1, service2, service3] %}
{% if uac.double_check_failures %}
formula {{ service.state_name }}_needs_probing = ({{ service.state_name }}_latest_probe = {{ service.state_name }}_latest_probe_max) | ({{ service.state_name }}hat = 1);
{% else %}
formula {{ service.state_name }}_needs_probing = {{ service.state_name }}_latest_probe = {{ service.state_name }}_latest_probe_max;
{% endif %}
{% endfor %}

{% for service in [service1, service2, service3] %}
formula {{ service.state_name }}_needs_invocation = {{ service.state_name }}_needs_probing | (alarm = 1 & successful_invocation = 0);
{% endfor %}

// Rewards
rewards "total_invocations"
    {% for service in [service1, service2, service3] %}
    [{{ service.state_name }}_invocation] true: 1;
    {% endfor %}
endrewards

{% for service in [service1, service2, service3] %}
rewards "{{ service.state_name }}_invocations"
    [{{ service.state_name }}_invocation] true: 1;
endrewards

{% endfor %}
rewards "total_costs"
    {% for service in [service1, service2, service3] %}
    [{{ service.state_name }}_invocation] true: {{service.costs}};
    {% endfor %}
endrewards

rewards "model_drift"
    {% for service in [service1, service2, service3] %}
    {% if service.simple_service %}
    [{{ action7 }}] ({{ service.state_name }} = 0 & {{ service.state_name }}hat = 1) | ({{ service.state_name }} = 1 & {{ service.state_name }}hat = 0) | ({{ service.state_name }} = 2 & {{ service.state_name }}hat = 0) : 1;
    {% else %}
    [{{ action7 }}] {{ service.state_name }} != {{ service.state_name }}hat: 1;
    {% endif %}
    {% endfor %}
endrewards

rewards "model_drift_pessimistic"
    {% for service in [service1, service2, service3] %}
    [{{ action7 }}] {{ service.state_name }} < {{ service.state_name }}hat: 1;
    {% endfor %}
endrewards

rewards "model_drift_optimistic"
    {% for service in [service1, service2, service3] %}
    [{{ action7 }}] {{ service.state_name }} > {{ service.state_name }}hat: 1;
    {% endfor %}
endrewards

rewards "alarms"
    [end_round] alarm = 1: 1;
endrewards

rewards "time_per_alarm"
    {% for service in [service1, service2, service3] %}
    [{{ service.state_name }}_invocation] alarm = 1 & successful_invocation = 0 & {{ service.state_name }} = 0: 1;
    [{{ service.state_name }}_invocation] alarm = 1 & successful_invocation = 0 & {{ service.state_name }} > 0: {{ service.timeout_time | default(3) }};
    {% endfor %}
endrewards