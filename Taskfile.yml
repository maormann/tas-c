---
version: '3'

vars:
  DOCKER_RUN: "{{if .NO_DOCKER_ENV}}{{else}}docker run --rm -ti -v ./:/app -e LOGGING_LEVEL=${LOGGING_LEVEL:-info} prism{{end}}"

dotenv:
  - ".env"

includes:
  uni:
    taskfile: Taskfile.uni.yml
    optional: true
  PARLEY: Taskfile.parley.yml

tasks:
  help:
    summary: List describes commands
    cmd: FORCE_COLOR=true task --list
    silent: true
    aliases:
      - default

  build:
    desc: Build the docker image and add dependencies
    cmds:
      - >
        docker build
        -t prism
        --build-arg uid=$(id -u)
        --build-arg gid=$(id -g)
        {{if .prism_version}}--build-arg prism_version={{.prism_version}}{{end}}
        {{if .prism_arch}}--build-arg prism_arch={{.prism_arch}}{{end}}
        .
      - task: add-parley
      - task: build-python-dependencies

  add-parley:
    desc: Add PARLEY with git submodule
    cmds:
      - |
        if test ! -d PARLEY; then
        git submodule add -f -b {{.PARLEY_BRANCH}} {{.PARLEY_REPO}} PARLEY
        fi
      - git submodule update --recursive --remote
    vars:
      PARLEY_REPO: '{{default "https://github.com/maormann/PARLEY.git" .PARLEY_REPO}}'
      PARLEY_BRANCH: '{{default "max_tas" .PARLEY_BRANCH}}'

  build-python-dependencies:
    sources:
      - requirements.txt
      - PARLEY/requirements.txt
    cmds:
      - task: build-python-virtualenv
      - >
        {{.DOCKER_RUN}}
        bash -lc '
        source venv/bin/activate
        && pip install -r requirements.txt
        && pip install -r PARLEY/requirements.txt
        '

  build-python-virtualenv:
    cmds:
      - >
        {{.DOCKER_RUN}} python3 -m venv venv
    status:
      - test -d venv
    internal: true

  bash:
    desc: Run the docker execution environment
    cmds:
      - docker run --rm -ti -v ./:/app prism
    aliases:
      - sh
      - shell

  root:
    summary: Run the docker execution environment as root
    cmds:
      - docker run --rm -ti -v ./:/app -u root prism

  xprism:
    desc: Run xprism (needs root)
    summary: |
      Only tested on linux
    cmds:
      - sudo xhost +local:*
      - docker run --rm -ti -e DISPLAY=$DISPLAY -v /tmp/.X11-unix/:/tmp/.X11-unix/ -v ./:/app prism xprism

  run-prism-dice:
    desc: Runs the dice example from PRISM
    summary: |
      For this example to work, the environment variable x must be set.
      This can be done e.g. with 'x=3 task {{.TASK}}'
    cmds:
      - >
        {{.DOCKER_RUN}}
        prism -dir /opt/prism/prism-examples/simple/dice dice.pm dice.pctl -const x={{.x}} -exportresults stdout
    requires:
      vars:
        - x

  run-aggregated-failure-rate:
    desc: Simple exemple for aggregated-failure-rate calculation
    cmds:
      - >
        {{.DOCKER_RUN}}
        bash -lc 'source venv/bin/activate && python3 run.py configurations/aggregated_failure_rate.yaml'
    interactive: true

  run-basic:
    desc: Run the basic example
    cmds:
      - >
        {{.DOCKER_RUN}}
        bash -lc 'source venv/bin/activate && python3 run.py configurations/basic.yaml'
    interactive: true

  run-configuration1:
    desc: Run configuration1 variants for strategy comparison
    cmds:
      - >
        {{.DOCKER_RUN}}
        bash -lc '
        source venv/bin/activate
        && python3 run.py configurations/configuration1.yaml
        && python3 run.py configurations/configuration1_no_urc.yaml
        && python3 run.py configurations/configuration1_no_double_check_failures.yaml
        && python3 run.py configurations/configuration1_no_urc_no_double_check_failures.yaml
        '

  run-configuration1-baseline:
    desc: Run configuration 1 baseline calulation
    cmds:
      - >
        {{.DOCKER_RUN}}
        bash -lc '
        source venv/bin/activate
        && python3 run.py configurations/configuration1_baseline.yaml
        '

  run-configuration2:
    desc: Run configuration 2
    summary: |
      configuration 2 has higher failure rate
      lower recovery rate
      and dirrefent costs per service
    cmds:
      - >
        {{.DOCKER_RUN}}
        bash -lc '
        source venv/bin/activate
        && python3 run.py configurations/configuration2.yaml
        '

  run-configuration3:
    desc: Run configuration 3
    summary: configuration 3 is a copy of c2 with a lower alarm rate
    cmds:
      - >
        {{.DOCKER_RUN}}
        bash -lc '
        source venv/bin/activate
        && python3 run.py configurations/configuration3.yaml
        '

  run-configuration4:
    desc: Run configuration 4
    summary: |
      configuration 4 is a copy of c2 where s2 is better and ceaper than s3
      the failure rates of s2 and s3 are swaped
    cmds:
      - >
        {{.DOCKER_RUN}}
        bash -lc '
        source venv/bin/activate
        && python3 run.py configurations/configuration4.yaml
        '

  lint:
    cmds:
      - >
        {{.DOCKER_RUN}}
        bash -lc '
        source venv/bin/activate
        && yamllint -s
        Taskfile.yml
        configurations/*yaml
        '
    silent: true
    aliases:
      - check
